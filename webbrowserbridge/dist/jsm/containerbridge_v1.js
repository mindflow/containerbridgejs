import { Logger } from './coreutil_v1.js';

class ContainerAsync {

    static timeout(milliseconds, promise) {
        return new Promise(function(resolve, reject) {
            setTimeout(function() {
                reject(new Error("timeout"));
            }, milliseconds);
            promise.then(resolve, reject);
        });
    }

    /**
     * 
     * @param {number} milliseconds 
     * @param {function} callback 
     */
    static delay(milliseconds, callback) {
        return setTimeout(callback, milliseconds);
    }


}

class ContainerCredentialsStorage {

    static store(username, password) {
        if (window.PasswordCredential) {
			const passwordCredential = new PasswordCredential({
				id: username,
				password: password
            });

            //const passwordCredentialsData = new CredentialCreationOptions();
			return navigator.credentials.store(passwordCredential).then((credential) => {
                LOG.info(credential);
            });
        }
        return Promise.resolve();
    }

}

const LOG$1 = new Logger("ContainerElement");

class ContainerElement {


    /**
     * 
     * @param {string} id 
     */
    static getElementById(id) {
        return document.getElementById(id);
    }

    /**
     * 
     * @param {string} valeu 
     */
    static createTextNode(value) {
        return document.createTextNode(value)
    }

    /**
     * 
     * @param {string} name 
     */
    static createElement(name) {
        return document.createElement(name)
    }

    /**
     * 
     * @param {String} id 
     */
    static removeElement(id) {
        const element = document.getElementById(id);
        element.parentNode.removeChild(element);
    }

    /**
     * 
     * @param {string} nameSpace 
     * @param {string} name 
     */
    static createElementNS(nameSpace, name) {
        return document.createElementNS(nameSpace, name);
    }

    /**
     * 
     * @param {Element} element 
     */
    static appendRootUiChild(element) {
        const header = document.getElementsByTagName("body")[0];
        header.appendChild(element);
    }


    /**
     * 
     * @param {Element} element 
     */
     static appendRootMetaChild(element) {
        const header = document.getElementsByTagName("head")[0];
        header.appendChild(element);
    }

    /**
     * 
     * @param {Element} parentElement 
     * @param {Element} childElement 
     */
     static prependChild(parentElement, childElement) {
        parentElement.prepend(childElement);
    }


    /**
     * 
     * @param {Element} parentElement 
     * @param {Element} childElement 
     */
    static appendChild(parentElement, childElement) {
        parentElement.appendChild(childElement);
    }

    /**
     * 
     * @param {Element} element 
     * @param {String} eventType 
     * @param {Function} listener 
     * @param {boolean} capture 
     */
    static addEventListener(element, eventType, listener, capture) {
        element.addEventListener(eventType, listener, capture);
    }

    /**
     * 
     * @param {Element} element 
     * @param {String} attributeKey 
     * @param {any} attributeValue 
     */
    static setAttribute(element, attributeKey, attributeValue) {
        element.setAttribute(attributeKey, attributeValue);
    }

    /**
     * 
     * @param {Element} element 
     * @param {String} attributeKey 
     */
     static getAttribute(element, attributeKey) {
        return element.getAttribute(attributeKey);
    }

    /**
     * 
     * @param {Element} prentElement 
     * @param {Element} childElement 
     */
    static contains(prentElement, childElement) {
        return prentElement.contains(childElement);
    }

    static isUIElement(value) {
        return value instanceof HTMLElement;
    }

}

class ContainerDatabaseStorage {

    /**
     * 
     * @param {String} dbName 
     * @param {Number} version
     * @returns {IDBOpenDBRequest}
     */
    static open(dbName, version) {
        return window.indexedDB.open(dbName, version);
    }

}

class ContainerLocalStorage {

    static setLocalAttribute(key, value) {
        window.localStorage.setItem(key,value);
    }

    static removeLocalAttribute(key) {
        window.localStorage.removeItem(key);
    }

    static hasLocalAttribute(key) {
        return window.localStorage.getItem(key) !== null;
    }

    static getLocalAttribute(key) {
        return window.localStorage.getItem(key);
    }


}

const LOG$2 = new Logger("ContainerHttpClient");

class ContainerHttpClient {

        /**
     * 
     * @param {String} url 
     * @param {Object} params 
     * @param {Number} connectionTimeout
     * @param {Number} responseTimeout
     */
    static fetch(url, params, connectionTimeout = 1000, responseTimeout = 4000) {
        return ContainerAsync.timeout(connectionTimeout, window.fetch(url, params));
    }

}

const LOG$3 = new Logger("ContainerSessionStorage");

class ContainerSessionStorage {

    static setSessionAttribute(key, value) {
        window.sessionStorage.setItem(key,value);
    }

    static removeSessionAttribute(key) {
        window.sessionStorage.removeItem(key);
    }

    static getSessionAttribute(key) {
        return window.sessionStorage.getItem(key);
    }

    static hasSessionAttribute(key) {
        return window.sessionStorage.getItem(key) !== null;
    }

    static setLocalAttribute(key, value) {
        window.localStorage.setItem(key,value);
    }


}

class ContainerWindow {

    /**
     * 
     * @param {String} type 
     * @param {ObjectFunction} listener 
     * @param {any} eventWrapperClass 
     */    
    static addEventListener(type, objectFunction, eventWrapperClass) {
        window.addEventListener(type, (event) => {
            objectFunction.call(new eventWrapperClass(event));
        });
    }
    
}

const LOG$4 = new Logger("ContainerUrl");

class ContainerUrl {

    /**
     * 
     * @param {String} urlString 
     */
    static loadUrl(urlString) {
        window.location = urlString;
    }

     /**
     * 
     * @param {Object} stateObject 
     * @param {String} title 
     * @param {String} urlString 
     */
    static replaceUrl(urlString, title, stateObject) {
        window.history.replaceState(stateObject, title, urlString);
    }

    /**
     * 
     * @param {Object} stateObject 
     * @param {String} title 
     * @param {String} urlString 
     */
    static pushUrl(urlString, title, stateObject) {
        window.history.pushState(stateObject, title, urlString);
    }

    /**
     * @returns {String}
     */
    static currentUrl() {
        return window.location.href;
    }

    /**
     * 
     * @param {ObjectFunction} objectFunction
     * @param {any} eventWrapperClass
     */
    static addUserNavigateListener(objectFunction, eventWrapperClass) {
        ContainerWindow.addEventListener("popstate", objectFunction, eventWrapperClass);
    }
}

export { ContainerAsync, ContainerCredentialsStorage, ContainerDatabaseStorage, ContainerElement, ContainerHttpClient, ContainerLocalStorage, ContainerSessionStorage, ContainerUrl, ContainerWindow };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
